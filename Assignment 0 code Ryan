{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a57917ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import math\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a9d782ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "def distinct_values(n, N):\n",
    "    return N*(1 - (1-1/N)**n)\n",
    "\n",
    "def approx(n, N):\n",
    "    #Function that approximates the expected number of distinct values if N>>1, which allows N*(1 - (1-1/N)**n) to be \n",
    "    #rewritten as N*(1 - exp(-n/N)). This approximated value is compared to the 'real' value for different N values.\n",
    "    return N*(1 - np.exp(-n/N))\n",
    "\n",
    "def testing(n, N, k, show_results):\n",
    "    #Function that tests if the expected number of distinct values corresponds to the experiments\n",
    "    #'n' = number of random integers between 1 and N\n",
    "    #'k' = nubmer of times the experiment is run\n",
    "    #'show_results' = if True=> array that shows the experiment is shown\n",
    "    n_value = n\n",
    "    N_value = N\n",
    "    N_range = np.arange(1, N_value, 1)\n",
    "\n",
    "    for l in range(0, k):\n",
    "        nr = 0 #number of unique values\n",
    "        repeat = 0\n",
    "        zeros = np.zeros(N_value)\n",
    "\n",
    "        for i in range(0, n_value):\n",
    "            integer = np.random.randint(1, N_value+1)\n",
    "            if integer in zeros: \n",
    "                repeat+=1\n",
    "            else:\n",
    "                zeros[integer-1]=integer\n",
    "                nr+=1\n",
    "        if show_results==True:\n",
    "            print('-------------------------------------------------------------------------')\n",
    "            print('Index of experiment:', l)\n",
    "            #print('Last random integer:', integer)        \n",
    "            print('Generated integers:', zeros)\n",
    "            print('Number of distinct values:', nr)\n",
    "            print('Number of repeated values:', repeat)\n",
    "        plt.scatter(l, nr)\n",
    "    \n",
    "    nr_expected = 0\n",
    "    nr_approx = 0\n",
    "    for i in range(1, n_value+1):\n",
    "        nr_expected = distinct_values(i, N_value)\n",
    "        nr_approx = approx(i, N_value)\n",
    "    print('Expected number of distinct values:', nr_expected)\n",
    "    print('Approx expected number of distinct values:', nr_approx) #prints the expected number of distinct values based\n",
    "                                                                   # on the approx(n, N) function \n",
    "    print('Difference = ', (nr_expected - nr_approx)/nr_approx * 100, '%')\n",
    "    \n",
    "    plt.axhline(nr_expected, linestyle='dashed', label='Expected number of distinct values')\n",
    "    \n",
    "\n",
    "        \n",
    "    plt.ylim(0, nr_expected*1.5)\n",
    "    plt.xlabel('Test index')\n",
    "    plt.ylabel('Number of distinct values')\n",
    "    plt.legend()\n",
    "    plt.show()\n",
    "    \n",
    "\n",
    "\n",
    "   \n",
    "    \n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4a008881",
   "metadata": {},
   "outputs": [],
   "source": [
    "testing(2, 2, 10, False) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f979f03b",
   "metadata": {},
   "outputs": [],
   "source": [
    "testing(2, 4, 25, False)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4b853197",
   "metadata": {},
   "outputs": [],
   "source": [
    "testing(100, 100, 25, False) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ae4862a",
   "metadata": {},
   "outputs": [],
   "source": [
    "testing(100, 365, 25, False) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "390e9276",
   "metadata": {},
   "outputs": [],
   "source": [
    "testing(1000, 1000, 25, False) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fe939666",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cec10bb3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4d103a17",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
